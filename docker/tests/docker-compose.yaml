version: '3.9'

services:
  test_go-app:
    container_name: test_go-app
    build: 
      context: ./
      dockerfile: ./docker/tests/Dockerfile
    env_file:
      - ./docker/tests/.env
    ports:
      - ${APP_PORT}:${APP_PORT}
    depends_on:
      test_pg_db:
        condition: service_healthy
      test_redis:
        condition: service_healthy
    links: 
        - test_pg_db
        - test_redis
    networks:
    - test_net
  test_pg_db:
    container_name: test_pg_db
    image: postgres:13.3
    environment:
      - PGUSER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
      - PGDATABASE=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST=${DB_HOST}
    ports:
      - ${DB_PORT}:${DB_PORT}
    restart: on-failure
    volumes:
      - pgdata:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready","--quiet","-d", "${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
    - test_net
  test_redis:
    container_name: test_redis
    image: redis:alpine
    command: redis-server --port ${CACHE_PORT} --requirepass ${CACHE_PASSWORD} --maxmemory ${CACHE_MAXMEM}
    ports:
      - ${CACHE_PORT}:${CACHE_PORT}
    restart: on-failure
    volumes: 
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
    - test_net

volumes:
  pgdata:
  redisdata:

networks:
  test_net:
    driver: bridge